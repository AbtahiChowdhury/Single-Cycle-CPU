LIBRARY ieee;
USE ieee.std_logic_1164.all;

PACKAGE Chowdhury_Package_32BitArrayMultiplierTreeAdder_Nov23 IS
	COMPONENT Chowdhury_32BitArrayMultiplierTreeAdder_Nov23 IS
		PORT(A,B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
			  PH,PL : OUT STD_LOGIC_VECTOR(31 DOWNTO 0));
	END COMPONENT Chowdhury_32BitArrayMultiplierTreeAdder_Nov23;
END PACKAGE Chowdhury_Package_32BitArrayMultiplierTreeAdder_Nov23;


LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;
USE ieee.math_real.all;

ENTITY Chowdhury_32BitArrayMultiplierTreeAdder_Nov23 IS
	PORT(A,B : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		  PH,PL : OUT STD_LOGIC_VECTOR(31 DOWNTO 0));
END Chowdhury_32BitArrayMultiplierTreeAdder_Nov23;

ARCHITECTURE Chowdhury_Behaviour OF Chowdhury_32BitArrayMultiplierTreeAdder_Nov23 IS
	
	COMPONENT Chowdhury_LPM_64BitAdder_Nov23 IS
		PORT(dataa : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
			  datab : IN STD_LOGIC_VECTOR (63 DOWNTO 0);
			  result : OUT STD_LOGIC_VECTOR (63 DOWNTO 0));
	END COMPONENT;
	
	SIGNAL P : STD_LOGIC_VECTOR(63 DOWNTO 0) := x"0000000000000000";
	
	TYPE ADDER_SUM IS ARRAY (0 TO 30) OF STD_LOGIC_VECTOR(63 DOWNTO 0);
	SIGNAL ADDER_SUMS : ADDER_SUM;
	
	TYPE BVAL IS ARRAY (0 TO 31) OF STD_LOGIC_VECTOR(31 DOWNTO 0);
	SIGNAL BV : BVAL;
	
	TYPE ANDOPVAL IS ARRAY (0 TO 31) OF STD_LOGIC_VECTOR(63 DOWNTO 0);
	SIGNAL ANDOP : ANDOPVAL;

BEGIN
	
	BV(0) <= (OTHERS => B(0));
	BV(1) <= (OTHERS => B(1));
	BV(2) <= (OTHERS => B(2));
	BV(3) <= (OTHERS => B(3));
	BV(4) <= (OTHERS => B(4));
	BV(5) <= (OTHERS => B(5));
	BV(6) <= (OTHERS => B(6));
	BV(7) <= (OTHERS => B(7));
	BV(8) <= (OTHERS => B(8));
	BV(9) <= (OTHERS => B(9));
	BV(10) <= (OTHERS => B(10));
	BV(11) <= (OTHERS => B(11));
	BV(12) <= (OTHERS => B(12));
	BV(13) <= (OTHERS => B(13));
	BV(14) <= (OTHERS => B(14));
	BV(15) <= (OTHERS => B(15));
	BV(16) <= (OTHERS => B(16));
	BV(17) <= (OTHERS => B(17));
	BV(18) <= (OTHERS => B(18));
	BV(19) <= (OTHERS => B(19));
	BV(20) <= (OTHERS => B(20));
	BV(21) <= (OTHERS => B(21));
	BV(22) <= (OTHERS => B(22));
	BV(23) <= (OTHERS => B(23));
	BV(24) <= (OTHERS => B(24));
	BV(25) <= (OTHERS => B(25));
	BV(26) <= (OTHERS => B(26));
	BV(27) <= (OTHERS => B(27));
	BV(28) <= (OTHERS => B(28));
	BV(29) <= (OTHERS => B(29));
	BV(30) <= (OTHERS => B(30));
	BV(31) <= (OTHERS => B(31));
	
	ANDOP(0) <=  "00000000000000000000000000000000" & (A AND BV(0));
	ANDOP(1) <=  "0000000000000000000000000000000" & (A AND BV(1)) & "0";
	ANDOP(2) <=  "000000000000000000000000000000" & (A AND BV(2)) & "00";
	ANDOP(3) <=  "00000000000000000000000000000" & (A AND BV(3)) & "000";
	ANDOP(4) <=  "0000000000000000000000000000" & (A AND BV(4)) & "0000";
	ANDOP(5) <=  "000000000000000000000000000" & (A AND BV(5)) & "00000";
	ANDOP(6) <=  "00000000000000000000000000" & (A AND BV(6)) & "000000";
	ANDOP(7) <=  "0000000000000000000000000" & (A AND BV(7)) & "0000000";
	ANDOP(8) <=  "000000000000000000000000" & (A AND BV(8)) & "00000000";
	ANDOP(9) <=  "00000000000000000000000" & (A AND BV(9)) & "000000000";
	ANDOP(10) <= "0000000000000000000000" & (A AND BV(10)) & "0000000000";
	ANDOP(11) <= "000000000000000000000" & (A AND BV(11)) & "00000000000";
	ANDOP(12) <= "00000000000000000000" & (A AND BV(12)) & "000000000000";
	ANDOP(13) <= "0000000000000000000" & (A AND BV(13)) & "0000000000000";
	ANDOP(14) <= "000000000000000000" & (A AND BV(14)) & "00000000000000";
	ANDOP(15) <= "00000000000000000" & (A AND BV(15)) & "000000000000000";
	ANDOP(16) <= "0000000000000000" & (A AND BV(16)) & "0000000000000000";
	ANDOP(17) <= "000000000000000" & (A AND BV(17)) & "00000000000000000";
	ANDOP(18) <= "00000000000000" & (A AND BV(18)) & "000000000000000000";
	ANDOP(19) <= "0000000000000" & (A AND BV(19)) & "0000000000000000000";
	ANDOP(20) <= "000000000000" & (A AND BV(20)) & "00000000000000000000";
	ANDOP(21) <= "00000000000" & (A AND BV(21)) & "000000000000000000000";
	ANDOP(22) <= "0000000000" & (A AND BV(22)) & "0000000000000000000000";
	ANDOP(23) <= "000000000" & (A AND BV(23)) & "00000000000000000000000";
	ANDOP(24) <= "00000000" & (A AND BV(24)) & "000000000000000000000000";
	ANDOP(25) <= "0000000" & (A AND BV(25)) & "0000000000000000000000000";
	ANDOP(26) <= "000000" & (A AND BV(26)) & "00000000000000000000000000";
	ANDOP(27) <= "00000" & (A AND BV(27)) & "000000000000000000000000000";
	ANDOP(28) <= "0000" & (A AND BV(28)) & "0000000000000000000000000000";
	ANDOP(29) <= "000" & (A AND BV(29)) & "00000000000000000000000000000";
	ANDOP(30) <= "00" & (A AND BV(30)) & "000000000000000000000000000000";
	ANDOP(31) <= "0" & (A AND BV(31)) & "0000000000000000000000000000000";
	
	ADDER0:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(0),  datab=>ANDOP(1),  result=>ADDER_SUMS(0));
	ADDER1:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(2),  datab=>ANDOP(3),  result=>ADDER_SUMS(1));
	ADDER2:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(4),  datab=>ANDOP(5),  result=>ADDER_SUMS(2));
	ADDER3:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(6),  datab=>ANDOP(7),  result=>ADDER_SUMS(3));
	ADDER4:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(8),  datab=>ANDOP(9),  result=>ADDER_SUMS(4));
	ADDER5:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(10), datab=>ANDOP(11), result=>ADDER_SUMS(5));
	ADDER6:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(12), datab=>ANDOP(13), result=>ADDER_SUMS(6));
	ADDER7:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(14), datab=>ANDOP(15), result=>ADDER_SUMS(7));
	ADDER8:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(16), datab=>ANDOP(17), result=>ADDER_SUMS(8));
	ADDER9:  Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(18), datab=>ANDOP(19), result=>ADDER_SUMS(9));
	ADDER10: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(20), datab=>ANDOP(21), result=>ADDER_SUMS(10));
	ADDER11: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(22), datab=>ANDOP(23), result=>ADDER_SUMS(11));
	ADDER12: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(24), datab=>ANDOP(25), result=>ADDER_SUMS(12));
	ADDER13: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(26), datab=>ANDOP(27), result=>ADDER_SUMS(13));
	ADDER14: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(28), datab=>ANDOP(29), result=>ADDER_SUMS(14));
	ADDER15: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ANDOP(30), datab=>ANDOP(31), result=>ADDER_SUMS(15));
	
	ADDER16: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(0),  datab=>ADDER_SUMS(1),  result=>ADDER_SUMS(16));
	ADDER17: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(2),  datab=>ADDER_SUMS(3),  result=>ADDER_SUMS(17));
	ADDER18: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(4),  datab=>ADDER_SUMS(5),  result=>ADDER_SUMS(18));
	ADDER19: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(6),  datab=>ADDER_SUMS(7),  result=>ADDER_SUMS(19));
	ADDER20: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(8),  datab=>ADDER_SUMS(9),  result=>ADDER_SUMS(20));
	ADDER21: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(10), datab=>ADDER_SUMS(11), result=>ADDER_SUMS(21));
	ADDER22: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(12), datab=>ADDER_SUMS(13), result=>ADDER_SUMS(22));
	ADDER23: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(14), datab=>ADDER_SUMS(15), result=>ADDER_SUMS(23));
	
	ADDER24: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(16), datab=>ADDER_SUMS(17), result=>ADDER_SUMS(24));
	ADDER25: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(18), datab=>ADDER_SUMS(19), result=>ADDER_SUMS(25));
	ADDER26: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(20), datab=>ADDER_SUMS(21), result=>ADDER_SUMS(26));
	ADDER27: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMs(22), datab=>ADDER_SUMS(23), result=>ADDER_SUMS(27));
	
	ADDER28: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMS(24), datab=>ADDER_SUMS(25), result=>ADDER_SUMS(28));
	ADDER29: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMS(26), datab=>ADDER_SUMS(27), result=>ADDER_SUMS(29));
	
	ADDER30: Chowdhury_LPM_64BitAdder_Nov23 PORT MAP(dataa=>ADDER_SUMS(28), datab=>ADDER_SUMS(29), result=>ADDER_SUMS(30));
	
	PH <= ADDER_SUMS(30)(63 DOWNTO 32);
	PL <= ADDER_SUMS(30)(31 DOWNTO 0);
	
END Chowdhury_Behaviour;